import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.aplicaciones.Rosace.informacion.*;
import icaro.aplicaciones.Rosace.tareasComunes.*;
import icaro.aplicaciones.Rosace.objetivosComunes.*;
import icaro.aplicaciones.agentes.agenteAplicacionSubordinadoCognitivo.tareas.*;
import icaro.aplicaciones.agentes.agenteAplicacionSubordinadoConCambioRolCognitivo.informacion.*;
import icaro.aplicaciones.agentes.agenteAplicacionSubordinadoConCambioRolCognitivo.objetivos.*;
//import icaro.aplicaciones.agentes.agenteAplicacionSubordinadoConCambioRolCognitivo.objetivos.CambiarRol;
import icaro.aplicaciones.agentes.agenteAplicacionSubordinadoConCambioRolCognitivo.tareas.*;
import icaro.aplicaciones.agentes.componentesInternos.movimientoCtrl.*;
// se utilizan los objetivos y las tareas del Agente Subordinado y se incorporan nuevos objetivos, tareas y clases
import java.util.ArrayList;
import java.lang.String;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;

//Primera regla que se ejecutara. Solo se debe disparar una vez.
//Primera regla que se ejecutara. Solo se debe disparar una vez.
//Primera regla que se ejecutara. Solo se debe disparar una vez.
// Suponemos que el este componente es un robot como el resto del equipo
rule "Generacion de componentes internos"
 when
    not ( exists(InfoCompMovimiento()))
 then
   TareaSincrona tarea3 = gestorTareas.crearTareaSincrona(CrearComponentesInternos.class);
   tarea3.ejecutar( );             
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());   
    System.out.println( "\n"+agentId +"EJECUTO LA REGLA Acciones Iniciales\n\n" ); 
end
rule "Acciones Iniciales"
 when
    infoCompmov: (InfoCompMovimiento())
    not ( exists(Focus()))
    not ( exists(MisObjetivos()))
 then
   Tarea tarea1 = gestorTareas.crearTarea(InicializarInfoWorkMemCRN.class);
   tarea1.ejecutar(VocabularioRosace.IdentRolAgteDistribuidorTareas,infoCompmov );           
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());   
    System.out.println( "\n"+agentId +"EJECUTO LA REGLA Acciones Iniciales\n\n" ); 
end
// Objetivo Conocer Mi equipo Se conseguira este objetivo cuando el agte tenga respuestas de los miembros de equipo
// indicandole su equipo y su rol tambien la posicion y estado
rule "Generacion Objetivo Conocer MiEquipo "
// Se genera al principio de la simulacion 
when
    focoActual : Focus(foco == null)
    misObjs: MisObjetivos()
    miStatus: RobotStatus(idRobot == agentId)
    not (exists (DefinirMiEquipo()))
 then
    DefinirMiEquipo definirMiequipoObj = new DefinirMiEquipo(VocabularioRosace.IdentMisionEquipo);
 //se genera y se focaliza
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(GenerarObjetivoyFocalizarlo.class);
    tarea.ejecutar(definirMiequipoObj,misObjs,focoActual); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    System.out.println( "\n"+agentId + "Foco: NULL " +" \n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
rule "Inicio consecucion Objetivo Conocer MiEquipo "
// Consecucion Objetivo Conocer mi equipo
when   
    miEquipo: InfoEquipo(inicioContactoConEquipo== false)
    miStatus: RobotStatus(idRobot == agentId)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING)
    focoActual : Focus(foco == obj1)
then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ContactarMiembrosEquipo.class);
    tarea.ejecutar(miStatus,miEquipo); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
rule "Proceso InfoRol para conseguir Objetivo Conocer MiEquipo "
when   
    miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
    infoRolRecibido: InfoRolAgente(identEquipoAgte == idTeam)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING)
    focoActual : Focus(foco == obj1)
then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarInfoRolAgente.class);
    tarea.ejecutar(miEquipo,infoRolRecibido); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
// consecucion del objetivo DefinirMiEquipo
// El objetivo se considera conseguido si tengo todas las respuestas posibles o si llega el informe timeout de espera
rule "Proceso timeout para conseguir Objetivo Conocer MiEquipo "
when   
    miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
    misObjs: MisObjetivos()
    infoTarea: InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutContactarMiembrosEquipo)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING)
    focoActual : Focus(foco == obj1)
then
// se da por conseguido el objetivo 
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ConseguirObjetivoActualizarFoco.class);
    tarea.ejecutar(misObjs,obj1,focoActual ); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
rule "Proceso una peticion del CC despues de conseguir contactar con mi equipo "
when   
    miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
  //  obj1 : DefinirMiEquipo(state == Objetivo.SOLVED)
 //   focoActual : Focus(foco == obj1)
    not (exists (ExptComunicacionConJefe()))
    ccOrden:OrdenCentroControl(mensajeOrden == VocabularioRosace.MsgOrdenCCAyudarVictima,victim:justificacion )
then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(InterpretarPeticionDelCC.class);
     tarea.ejecutar(ccOrden,null,miEquipo);
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
rule "Proceso una peticion del CC cuando se espera que el jefe ordene algo "
when   
    miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
 //   obj1 : DefinirMiEquipo(state == Objetivo.SOLVED)
 //   focoActual : Focus(foco == obj1)
    miExpComJefe:ExptComunicacionConJefe(miComunicacionConJefe== true)
 //   victimaCC:Victim($idVict:name)   
    ccOrden:OrdenCentroControl(mensajeOrden == VocabularioRosace.MsgOrdenCCAyudarVictima,victim:justificacion )
then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(InterpretarPeticionDelCC.class);
     tarea.ejecutar(ccOrden,miExpComJefe,miEquipo);
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
rule "Si me llega una peticion de envio de mi evaluacion del Agte Asignador  la calculo y se la mando"
salience 10
 when    
    miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
    robot:RobotStatus()
    misObjs: MisObjetivos()
    victims2R:VictimsToRescue()
    peticionAgte: PeticionAgente( mensajePeticion == VocabularioRosace.MsgPeticionEnvioEvaluaciones,
                                 identAgente == VocabularioRosace.IdentAgteDistribuidorTareas,victimaCC:justificacion)
  then
     TareaSincrona tarea = gestorTareas.crearTareaSincrona(MandarEvaluacionAlAgteAsignador.class);
     tarea.ejecutar(null,peticionAgte,misObjs,robot,victims2R); 
     recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
     System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
end

rule "Procesar propuesta para que asuma el objetivo cuando no tengo objetivo focalizado "
   when
      victimaCC:Victim(idVict:name)   
//      focoActual : Focus(foco == null)
      misObjs: MisObjetivos()
      miStatus:RobotStatus()
      victims2R:VictimsToRescue(victims2Rescue !=null)
      propuesta:PropuestaAgente (msgPropuesta:mensajePropuesta == VocabularioRosace.MsgPropuesta_Para_Aceptar_Objetivo,identObjectRefPropuesta == idVict)
      not( exists ( AceptacionPropuesta(propuestaAceptada == propuesta  )))
   then
      TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarPropuestaParaAsumirObjetivo.class);
      tarea.ejecutar(null,miStatus,misObjs,victims2R,propuesta );
      recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
      System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );                     
end

rule "Si he aceptado la propuesta para asumir el objetivo lo genero y lo focalizo "
   when
      infoComMov :InfoCompMovimiento ()
      victimaCC:Victim(idVict:name)   
 //     focoActual : Focus(foco == null)
      focoActual : Focus()
      misObjs: MisObjetivos()
  //    RobotStatus()
     victims2R:VictimsToRescue()
      acPropuesta:AceptacionPropuesta (identAgente == agentId,identObjectRefAcetPropuesta == idVict)
   then
      TareaSincrona tarea = gestorTareas.crearTareaSincrona(GeneraryEncolarObjetivoActualizarFocoNC.class);
      tarea.ejecutar(misObjs,focoActual,victimaCC,acPropuesta,infoComMov,victims2R );
      recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
      System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );                     
end

//==========================================================================
//   Reglas del ciclo de vida del objetivo AyudarVictima  
//           
//==========================================================================
//

// Estoy  intentando conseguir un objetivo Ayudar a una victima y me llega un msg del centro de control
// genero una tarea para tratar el mensaje

//==========================================================================
//   Reglas de focalizacion objetivo AyudarVictima  
//           
//==========================================================================
//
rule "Movimiento hacia una nueva victima tras conseguir salvar a la victima mas prioritaria"
salience 10
when
    misObjs : MisObjetivos(objetivoMasPrioritario !=null)
    victimaCC:Victim($idVict:name) 
    victims2R:VictimsToRescue(victims2Rescue!=null)
    infoComMov :InfoCompMovimiento()
    obj :AyudarVictima( victimId == $idVict,state == Objetivo.SOLVED )
    focoActual:Focus(foco == obj)
    exists (Informe (referenciaContexto==$idVict,contenidoInforme == VocabularioRosace.MsgeLlegadaDestino))
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MoverseAsalvarVictima.class); //crea otro  objetivo ayudar victima
    tarea.ejecutar(misObjs,focoActual,victimaCC,infoComMov,victims2R); // poner tambien en la tarea la creacion del objetivo decidir quien va
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    System.out.println( "\n"+agentId + "Foco: Estoy en  el objetivo "+focoActual.toString()+" \n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+$idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
end
//==========================================================================
//   Reglas de  consecucion  del objetivo AyudarVictima  : Condiciones para que se consiga
//           
//==========================================================================
//

rule "Consecucion del  objetivo Ayudar a una victima"
no-loop true
// Se recibe un informe diciendo de un componente interno diciendo que se ha llegado a la situacion de la victima 
when
    victimaCC:Victim(idVict:name)
    misObjs : MisObjetivos()
    infoComMov :InfoCompMovimiento()
    victims2R:VictimsToRescue(victims2Rescue!=null)
    informe: Informe ( referenciaContexto==idVict ,contenidoInforme == VocabularioRosace.MsgeLlegadaDestino)
  //  obj1 :AyudarVictima(state == Objetivo.SOLVING, victimId == idVict)   
 //   focoActual:Focus(foco == obj1)
    focoActual:Focus(obj1:foco)
 then
    modify(obj1) { setState(Objetivo.SOLVED) }
   TareaSincrona tarea = gestorTareas.crearTareaSincrona(MoverseAsalvarVictima.class); //crea otro  objetivo ayudar victima
    tarea.ejecutar(misObjs,focoActual,victimaCC,infoComMov,victims2R); // poner tambien en la tarea la creacion del objetivo decidir quien va
 //  retract (informe);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
    System.out.println( "\n"+agentId + "Foco: Estoy en  el objetivo "+focoActual.toString()+" \n\n" );
  
end


rule "Fin de la simulacion"
  when    
    robot:RobotStatus()
    victims2R:VictimsToRescue(victims2Rescue!=null)
    misObjs: MisObjetivos()
//    finSimu: FinSimulacion(flagActivacion==false)                
    finSimu: FinSimulacion()                
  then
     TareaSincrona tarea = gestorTareas.crearTareaSincrona(FinalizarSimulacion.class);
     tarea.ejecutar(robot,victims2R,misObjs,finSimu);
     recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());

end
