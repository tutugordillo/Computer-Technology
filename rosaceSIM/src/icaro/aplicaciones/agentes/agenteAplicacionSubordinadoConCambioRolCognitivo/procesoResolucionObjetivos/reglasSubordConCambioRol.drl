import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.InformeDeTarea;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.aplicaciones.Rosace.informacion.*;
import icaro.aplicaciones.Rosace.tareasComunes.*;
import icaro.aplicaciones.Rosace.objetivosComunes.*;
import icaro.aplicaciones.agentes.agenteAplicacionSubordinadoCognitivo.tareas.*;
import icaro.aplicaciones.agentes.agenteAplicacionSubordinadoConCambioRolCognitivo.informacion.*;
import icaro.aplicaciones.agentes.agenteAplicacionSubordinadoConCambioRolCognitivo.objetivos.*;
//import icaro.aplicaciones.agentes.agenteAplicacionSubordinadoConCambioRolCognitivo.objetivos.CambiarRol;
import icaro.aplicaciones.agentes.agenteAplicacionSubordinadoConCambioRolCognitivo.tareas.*;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.Objetivo;
// se utilizan los objetivos y las tareas del Agente Subordinado y se incorporan nuevos objetivos, tareas y clases
import java.util.ArrayList;
import java.lang.String;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;

//Primera regla que se ejecutara. Solo se debe disparar una vez.
rule "Acciones Iniciales Subordinado Cambio Rol"
 when
    not ( exists(Focus()))
    not ( exists(MisObjetivos()))
 then
    Tarea tarea1 = gestorTareas.crearTarea(InicializarInfoWorkMemCR.class);
    tarea1.ejecutar(VocabularioRosace.IdentRolAgtesSubordinados);
 //   gestorTareas.ejecutar(InicializarInfoWorkMemCR.class,VocabularioRosace.IdentRolAgtesSubordinados );
    System.out.println( "\n"+agentId +"EJECUTO LA REGLA Acciones Iniciales\n\n" ); 
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
   //JM nuevo
   //recursoTrazas.aceptaNuevaTraza(new InfoTraza("OrdenAsignacion",agentId + " : REGLA " + drools.getRule().getName(), InfoTraza.NivelTraza.debug));    
    
end

rule "Si me llega una peticion de envio de mi evaluacion del Agte Asignador  la calculo y se la mando"
 when    
//    focoActual : Focus(foco == null)
    misObjs: MisObjetivos()
    robot:RobotStatus()
    victims2R:VictimsToRescue(victims2Rescue!=null)
    peticionAgte: PeticionAgente( mensajePeticion == VocabularioRosace.MsgPeticionEnvioEvaluaciones,
                                 identAgente == VocabularioRosace.IdentAgteDistribuidorTareas,victimaCC:justificacion)
  then
     TareaSincrona tarea = gestorTareas.crearTareaSincrona(MandarEvaluacionAlAgteAsignador.class);
     tarea.ejecutar(null,peticionAgte,misObjs,robot,victims2R); 
     recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
     System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
end

rule "Procesar propuesta para que asuma el objetivo cuando no tengo objetivo focalizado "
   when
      victimaCC:Victim(idVict:name)   
//      focoActual : Focus(foco == null)
      misObjs: MisObjetivos()
      miStatus:RobotStatus()
      victims2R:VictimsToRescue(victims2Rescue !=null)
      propuesta:PropuestaAgente (msgPropuesta:mensajePropuesta == VocabularioRosace.MsgPropuesta_Para_Aceptar_Objetivo,identObjectRefPropuesta == idVict)
      not( exists ( AceptacionPropuesta(propuestaAceptada == propuesta  )))
   then
      TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarPropuestaParaAsumirObjetivo.class);
      tarea.ejecutar(null,miStatus,misObjs,victims2R,propuesta );
      recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
      System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );                     
end

rule "Si he aceptado la propuesta para asumir el objetivo lo genero y lo focalizo "
   when
      victimaCC:Victim(idVict:name)   
      focoActual : Focus(foco == null)
      misObjs: MisObjetivos()
  //    RobotStatus()
  //    victims2R:VictimsToRescue(victims2Rescue!=null)
      acPropuesta:AceptacionPropuesta (identAgente == agentId,identObjectRefAcetPropuesta == idVict)
   then
      TareaSincrona tarea = gestorTareas.crearTareaSincrona(GeneraryEncolarObjetivoActualizarFoco.class);
      tarea.ejecutar(misObjs,focoActual,victimaCC,acPropuesta );
      recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
      System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );                     

      depuracionOrdenAsignacionVictimas(agentId, idVict, recursoTrazas);
end

rule "Si estoy con un objetivo y he aceptado la propuesta para asumir otro objetivo lo genero y focalizo el mas prioritario "
   when
      victimaCC:Victim(idVict:name)
      obj: AyudarVictima ( victimId != idVict)
      focoActual : Focus(foco == obj)
      misObjs : MisObjetivos()
 //     miStatus:RobotStatus()
 //     victims2R:VictimsToRescue(victims2Rescue!=null)
      acPropuesta:AceptacionPropuesta (identAgente == agentId,identObjectRefAcetPropuesta == idVict)
   then
      TareaSincrona tarea = gestorTareas.crearTareaSincrona(GeneraryEncolarObjetivoActualizarFoco.class);
      tarea.ejecutar(misObjs,focoActual,victimaCC,acPropuesta );
      recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
      System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );                     
      
      depuracionOrdenAsignacionVictimas(agentId, idVict, recursoTrazas);      
end
// Ciclo de vida de objetivos 
// Objetivo Conocer Mi equipo Se conseguira este objetivo cuando el gagte tenga respuestas de los miembros de equipo
// indicandole su equipo y su rol tambien la posicion y estado

rule "Generacion Objetivo Conocer MiEquipo "
// Se genera al principio de la simulacion 
when
    focoActual : Focus(foco == null)
    misObjs: MisObjetivos()
    miStatus: RobotStatus(idRobot == agentId)
 then
    DefinirMiEquipo definirMiequipoObj = new DefinirMiEquipo(VocabularioRosace.IdentMisionEquipo);
 //se genera y se focaliza
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(GenerarObjetivoyFocalizarlo.class);
    tarea.ejecutar(definirMiequipoObj,misObjs,focoActual); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    System.out.println( "\n"+agentId + "Foco: NULL " +" \n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
rule "Inicio consecucion Objetivo Conocer MiEquipo "
// Consecucion Objetivo Conocer mi equipo
when   
    miEquipo: InfoEquipo(inicioContactoConEquipo== false)
    miStatus: RobotStatus(idRobot == agentId)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING)
    focoActual : Focus(foco == obj1)
then
//    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ContactarMiembrosEquipo.class);
//    tarea.ejecutar(miStatus,miEquipo); 
    gestorTareas.ejecutar(ContactarMiembrosEquipo.class,miStatus,miEquipo );
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
rule "Proceso InfoRol para conseguir Objetivo Conocer MiEquipo "
when   
    miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
    infoRolRecibido: InfoRolAgente(identEquipoAgte == idTeam)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING)
    focoActual : Focus(foco == obj1)
then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarInfoRolAgente.class);
    tarea.ejecutar(miEquipo,infoRolRecibido); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
// consecucion del objetivo DefinirMiEquipo
// El objetivo se considera conseguido si tengo todas las respuestas posibles o si llega el informe timeout de espera
rule "Proceso timeout para conseguir Objetivo Conocer MiEquipo "
when   
    miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
    infoTarea: InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutContactarMiembrosEquipo)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING)
    focoActual : Focus(foco == obj1)
then
// se da por conseguido el objetivo 
    obj1.setSolved();
    update(obj1); retract(infoTarea);
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
// Inicio del proceso de Cambio de Rol
// Cuando ya esta definido el equipo y se recibe un mensaje del CC  se genera una expectativa que representa
// el hecho de que el agente espera tener comunicacion con su jefe para que su jefe le pida su evaluacion
rule "Proceso una peticion del CC despues de conseguir contactar con mi equipo "
when   
    miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVED)
    focoActual : Focus(foco == obj1)
    not (exists (ExptComunicacionConJefe()))
    ccOrden:OrdenCentroControl(mensajeOrden == VocabularioRosace.MsgOrdenCCAyudarVictima,victim:justificacion )
then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(InterpretarPeticionDelCC.class);
     tarea.ejecutar(ccOrden,null,miEquipo);
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
/**
rule "Proceso una peticion del CC cuando se espera que el jefe ordene algo "
when   
    miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVED)
    focoActual : Focus(foco == obj1)
    miExpComJefe:ExptComunicacionConJefe(miComunicacionConJefe== true)
 //   victimaCC:Victim($idVict:name)   
    ccOrden:OrdenCentroControl(mensajeOrden == VocabularioRosace.MsgOrdenCCAyudarVictima,victim:justificacion )
then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(InterpretarPeticionDelCC.class);
     tarea.ejecutar(ccOrden,miExpComJefe,miEquipo);
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
**/
rule "Proceso timeout asociado a la expectativa Comunicacion con jefe "
when   
    miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
 //   miExpComJefe:ExptComunicacionConJefe(miComunicacionConJefe== true)
    misObjs: MisObjetivos()
    victims2R:VictimsToRescue(victims2Rescue!=null)
    victimaCC:Victim($idVict:name)
    infoTarea: InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutReaccionJefeAmsgeCC,contenidoInforme == VocabularioRosace.PrefijoMsgTimeout)
then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MandarPropuestaAlJefeParaRealizarObjetivo.class);
    tarea.ejecutar(miEquipo,victimaCC,misObjs,victims2R);
    retract(infoTarea);
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
rule "El jefe no contesta a la propuesta para sumir el objetivo"
when   
    miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
    miExpComJefe:ExptComunicacionConJefe(miComunicacionConJefe== true)
 //   misObjs: MisObjetivos()
 //   victims2R:VictimsToRescue(victims2Rescue!=null)
 //   victimaCC:Victim($idVict:name)
    infoTarea: InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutRespuestaJefe,contenidoInforme == VocabularioRosace.PrefijoMsgTimeout)
then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(PeticionEstatusComunicacionConJefe.class);
    tarea.ejecutar(miEquipo,miExpComJefe);
    retract(infoTarea);
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
rule "Procesamiento de peticiones del estatus de mi comunicacion con el jefe"
when   
  //  miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
      miExpComJefe:ExptComunicacionConJefe(miComunicacionConJefe== false,restEquipoTieneComunicacionConJefe== true)
      peticionMiStatusComJefe: PeticionAgente(mensajePeticion == VocabularioRosace.MsgPeticionEnvioEstatusComunicacionConJefe,
                                              justificacion == VocabularioRosace.MsgJustificPetionEstatusComunConJefe)
then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarPeticionEstatusComunicacionConJefe.class);
    tarea.ejecutar(miExpComJefe,peticionMiStatusComJefe);
    retract(peticionMiStatusComJefe);
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
// Generacion del objetivo cambio de Rol cuando la expectativa de comunicacion con jefe se demuestra FALSA
rule "Equipo sin comunicacion con Jefe Generacion Objetivo Cambio de Rol"
when   
    miExpComJefe:ExptComunicacionConJefe(miComunicacionConJefe== false,restEquipoTieneComunicacionConJefe== false)
    focoActual : Focus()
    misObjs: MisObjetivos()
   not(exists CambiarRol())
then
    CambiarRol cambioRol= new CambiarRol();
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(GenerarObjetivoyFocalizarlo.class);
    tarea.ejecutar(cambioRol,misObjs,focoActual);
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
// Consecucion Objetivo Cambiar Rol a Igualitario del grupo de agentes subordinados
rule "Inicio consecucion Objetivo CambiarRol Envio propuesta al equipo "
when   
    miEquipo: InfoEquipo(inicioContactoConEquipo== true)
//    miStatus: RobotStatus(idRobot == agentId)
    obj1 : CambiarRol(state == Objetivo.SOLVING)
    focoActual : Focus(foco == obj1)
then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MandarPropuestaAlEquipoParaCambiarRol.class);
    tarea.ejecutar(miEquipo); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end

rule "Procesamiento Propuestas recibidas CambiarRol  "
when   
    miEquipo: InfoEquipo(inicioContactoConEquipo== true)
    minfoCambioRol: InfoCambioRolAgente(miPropuestaCREnviada == true,equipoAceptaPropuestaCR == false)
    propuestaRecibida : PropuestaAgente (identAgente !=agentId, mensajePropuesta == VocabularioRosace.MsgPropuesta_CambioRolaIgualitario)
    obj1 : CambiarRol(state == Objetivo.SOLVING)
    focoActual : Focus(foco == obj1)
then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarPropuestasCambioRol.class);
    tarea.ejecutar(minfoCambioRol,propuestaRecibida); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
rule "Inicio cambio de mi Rol cuando el equipo acepta la propuesta de CambiarRol  "
when   
    miEquipo: InfoEquipo(inicioContactoConEquipo== true)
    minfoCambioRol: InfoCambioRolAgente(miPropuestaCREnviada == true,equipoAceptaPropuestaCR == true)
//    propuestaRecibida : PropuestaAgente (identAgente !=agentId, mensajePropuesta == VocabularioRosace.MsgPropuesta_CambioRolaIgualitario)
    obj1 : CambiarRol(state == Objetivo.SOLVING)
    focoActual : Focus(foco == obj1)
then
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());  
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(CambiarMiRolAIgualitario.class);
    tarea.ejecutar(minfoCambioRol);    
end
rule "Fin de la simulacion"
  when    
    robot:RobotStatus()
    victims2R:VictimsToRescue(victims2Rescue!=null)
    misObjs: MisObjetivos()
//    finSimu: FinSimulacion(flagActivacion==false)                
    finSimu: FinSimulacion()                
  then
     TareaSincrona tarea = gestorTareas.crearTareaSincrona(FinalizarSimulacion.class);
     tarea.ejecutar(robot,victims2R,misObjs,finSimu);
     recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());

end



function void depuracionOrdenAsignacionVictimas(String agentId, String victim, ItfUsoRecursoTrazas recursoTrazas){
            recursoTrazas.aceptaNuevaTraza(new InfoTraza("OrdenAsignacion",
                                                     "El robot " + agentId + " se hace cargo de la victima " + victim,
                                                     InfoTraza.NivelTraza.debug));
}
